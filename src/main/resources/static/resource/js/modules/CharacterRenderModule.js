
import { ThreeInit } from '../core/ThreeInit.js';
export class CharacterRenderModule {
	constructor(gameClient) {
		this.gameClient = gameClient;
		this.loader = null;
		this.playerCharacters = new Map();
		this.playerRenderInstances = new Map();
		this.myCharacter = null;
		// Ïï†ÎãàÎ©îÏù¥ÏÖò Í¥ÄÎ†® 
		this.mixer = null;
		this.clock = new THREE.Clock();
		this.walkAction = null;
		// Î™®Îç∏ Í≤ΩÎ°ú ÏÑ§Ï†ï
		this.ASSET_CONFIG = {
			MODEL: { base: '/resource/model/', ext: '.glb' }
		};

		console.log('üì¶ CharacterRenderModule ÏÉùÏÑ±Îê®');
	}

	// ===== Î™®Îìà Ï¥àÍ∏∞Ìôî =====
	async initialize() {
		try {
			console.log('üé® Ï∫êÎ¶≠ÌÑ∞ Î†åÎçîÎßÅ Î™®Îìà Ï¥àÍ∏∞Ìôî');
			// THREE Í∞ùÏ≤¥ ÌôïÏù∏
			console.log('THREE Í∞ùÏ≤¥:', typeof THREE);

			// GLTFLoader Ï¥àÍ∏∞Ìôî
			if (typeof THREE.GLTFLoader !== 'undefined') {
				this.loader = new THREE.GLTFLoader();
				console.log('‚úì GLTFLoader Ï¥àÍ∏∞Ìôî ÏôÑÎ£å');
			} else {
				throw new Error('GLTFLoaderÍ∞Ä Î°úÎìúÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.');
			}

		} catch (error) {
			console.error('‚ùå Ï∫êÎ¶≠ÌÑ∞ Î†åÎçîÎßÅ Î™®Îìà Ï¥àÍ∏∞Ìôî Ïã§Ìå®:', error);
			throw error;
		}
	}

	// ===== Î™®Îç∏ Í≤ΩÎ°ú ÏÉùÏÑ± =====
	getModelPath(partType, styleNumber) {
		if (!styleNumber) return null;

		const path = this.ASSET_CONFIG.MODEL.base + String(partType) + String(styleNumber) + this.ASSET_CONFIG.MODEL.ext;
		console.log('üîó ÏÉùÏÑ±Îêú Í≤ΩÎ°ú:', path);
		return path;
	}

	// ===== Ï∫êÎ¶≠ÌÑ∞ Î°úÎî© =====
	async loadCharacter(avatarInfo, position, memberId, sessionId, nickName) {

		let threeInstance;

		const character3D = document.getElementById('character3D');
		if (!character3D) {
			console.error('‚ùå character3D Ïª®ÌÖåÏù¥ÎÑàÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.');
			return null;
		}
		const canvas = document.createElement('canvas');
		canvas.id = `canvas-${sessionId}`;

		character3D.appendChild(canvas);

		threeInstance = new ThreeInit(canvas);
		
		const canvasElement = threeInstance.getCanvas();
		if (canvasElement) {
			canvasElement.setAttribute('data-player-id', sessionId);
			canvasElement.setAttribute('data-player-nickname', nickName);
			canvasElement.setAttribute('data-is-my-character',
				memberId === this.gameClient.player.memberId ? 'true' : 'false');
			console.log(`üè∑Ô∏è Ï∫îÎ≤ÑÏä§ ÌÉúÍ∑∏ ÏÑ§Ï†ï ÏôÑÎ£å: ${nickName} (${sessionId})`);
		}
		return new Promise((resolve, reject) => {

			this.loader.load(
				'/resource/model/body_anim.glb',
				(gltf) => {
					const character = gltf.scene;

					// Î≤†Ïù¥Ïä§ Ï∫êÎ¶≠ÌÑ∞ ÏÑ§Ï†ï
					this.setupBaseCharacter(character, avatarInfo, position, memberId, sessionId);

					// Ïî¨Ïóê Ï∂îÍ∞Ä
					const scene = threeInstance.getScene();
					scene.add(character);

					// Ï∫êÎ¶≠ÌÑ∞ ÎßµÏóê Ï†ÄÏû•
					this.playerCharacters.set(sessionId, character);

					// ÎÇ¥ Ï∫êÎ¶≠ÌÑ∞Ïù∏ Í≤ΩÏö∞ Î≥ÑÎèÑ Ï†ÄÏû•
					if (memberId === this.gameClient.player.memberId) {
						this.myCharacter = character;
					}
					this.setupCharacterAnimations(character, gltf, sessionId, memberId === this.gameClient.player.memberId);
					this.addPlayerToRenderData(sessionId, threeInstance, memberId === this.gameClient.player.memberId);
					// ÌååÏ∏† Î°úÎî©
					if (avatarInfo.parts) {
						this.loadCharacterParts(character, avatarInfo.parts, nickName);
					}
					resolve(character);
				}, undefined, reject);

		});
	}

	// ===== Î≤†Ïù¥Ïä§ Ï∫êÎ¶≠ÌÑ∞ ÏÑ§Ï†ï =====
	setupBaseCharacter(character, avatarInfo, position, memberId, sessionId) {
		// Ïä§ÌÇ® ÏÉâÏÉÅ Î∞è Ïû¨Ïßà ÏÑ§Ï†ï
		character.traverse((child) => {
			if (child.isMesh && child.material && child.material.color) {
				console.log('üé® Í∏∞Ï°¥ Ïû¨ÏßàÏóê ÏÉâÏÉÅ Ï†ÅÏö©:', avatarInfo.skinColor);
				child.material.color = new THREE.Color(avatarInfo.skinColor || 0xffe0bd);
				child.material.needsUpdate = true;
			}
		});
		// Ïä§ÏºÄÏùº ÏÑ§Ï†ï
		const characterConfig = this.gameClient.getCharacterConfig();
		const characterScale = characterConfig.SCALE;
		character.scale.set(characterScale, characterScale, characterScale);
	
			// ÌöåÏ†Ñ ÏÑ§Ï†ï
		character.rotation.y = Math.PI / 4;
		character.rotation.x = -Math.PI / 6;

		// ÏÇ¨Ïö©Ïûê Îç∞Ïù¥ÌÑ∞ Ï†ÄÏû•
		character.userData = {
			memberId: memberId,
			sessionId: sessionId,
			avatarInfo: avatarInfo
		};
	}

	setupCharacterAnimations(character, gltf, sessionId, isMyCharacter) {
		console.log(`üé¨ Ï∫êÎ¶≠ÌÑ∞ Ïï†ÎãàÎ©îÏù¥ÏÖò ÏÑ§Ï†ï: ${sessionId} (ÎÇ¥ Ï∫êÎ¶≠ÌÑ∞: ${isMyCharacter})`);

		// Î†åÎçî Ïù∏Ïä§ÌÑ¥Ïä§ Îç∞Ïù¥ÌÑ∞ Ï¥àÍ∏∞Ìôî
		if (!this.playerRenderInstances.has(sessionId)) {
			this.playerRenderInstances.set(sessionId, {
				threeInstance: null,
				canvas: null,
				isMyCharacter,
				mixer: null,
				clock: new THREE.Clock(),
				walkAction: null
			});
		}

		const instance = this.playerRenderInstances.get(sessionId);

		// Mixer ÏÑ§Ï†ï
		instance.mixer = new THREE.AnimationMixer(character);

		if (gltf.animations && gltf.animations.length > 0) {
			console.log('üìã Ïï†ÎãàÎ©îÏù¥ÏÖò ÌÅ¥Î¶ΩÎì§:', gltf.animations.map(c => c.name));

			const walkClip = gltf.animations.find(clip =>
				clip.name === "Armature|mixamo.com|Layer0"
			);

			if (walkClip) {
				instance.walkAction = instance.mixer.clipAction(walkClip);
				instance.walkAction.loop = THREE.LoopRepeat;
				instance.walkAction.enabled = true;
				instance.walkAction.paused = true;

				console.log(`‚úÖ ${sessionId} Ïï†ÎãàÎ©îÏù¥ÏÖò ÏÑ§Ï†ï ÏôÑÎ£å`);
			}
		}

		// ‚úÖ ÎÇ¥ Ï∫êÎ¶≠ÌÑ∞Ïù∏ Í≤ΩÏö∞ Ï∂îÍ∞Ä Ï≤òÎ¶¨ (Ìò∏ÌôòÏÑ± Ïú†ÏßÄ)
		if (isMyCharacter) {
			// Í∏∞Ï°¥ Î∞©Ïãù Ìò∏ÌôòÏÑ±ÏùÑ ÏúÑÌï¥ ÌÅ¥ÎûòÏä§ Î≥ÄÏàòÏóêÎèÑ Ï†ÄÏû•
			this.mixer = instance.mixer;
			this.walkAction = instance.walkAction;

			// MovementModuleÏóê Ïï†ÎãàÎ©îÏù¥ÏÖò Ïï°ÏÖò Ï†ÑÎã¨
			const movementModule = this.gameClient.getCharacterMovementModule();
			if (movementModule) {
				movementModule.setMyCharacter(character);
				movementModule.setAnimationActions(instance.walkAction);
			}

			console.log('‚úÖ ÎÇ¥ Ï∫êÎ¶≠ÌÑ∞ Ï∂îÍ∞Ä ÏÑ§Ï†ï ÏôÑÎ£å');
		}
	}

	addPlayerToRenderData(sessionId, threeInstance, isMyCharacter) {
		const instance = this.playerRenderInstances.get(sessionId);
		if (instance) {
			instance.threeInstance = threeInstance;
			instance.canvas = threeInstance.getCanvas();
		}

		console.log(`‚ûï ÌîåÎ†àÏù¥Ïñ¥ Î†åÎçî Îç∞Ïù¥ÌÑ∞Ïóê Ï∂îÍ∞Ä: ${sessionId} (ÎÇ¥ Ï∫êÎ¶≠ÌÑ∞: ${isMyCharacter})`);

	}

	updateAllPlayersAnimation(delta) {
		// Î™®Îì† ÌîåÎ†àÏù¥Ïñ¥ ÏàúÌöå Ï≤òÎ¶¨
		this.playerRenderInstances.forEach((data, sessionId) => {
			// üé¨ Ïï†ÎãàÎ©îÏù¥ÏÖò ÏóÖÎç∞Ïù¥Ìä∏
			if (data.mixer) {
				data.mixer.update(delta);
			}

			// üñºÔ∏è Î†åÎçîÎßÅ
			if (data.threeInstance) {
				data.threeInstance.render();
			}
		});
	}

	startPlayerWalkAnimation(sessionId) {
		const instance = this.playerRenderInstances.get(sessionId);
		if (instance?.walkAction && !instance.walkAction.isRunning()) {
			instance.walkAction.reset().play();
			console.log(`üö∂‚Äç‚ôÄÔ∏è ${sessionId} Í±∑Í∏∞ Ïï†ÎãàÎ©îÏù¥ÏÖò ÏãúÏûë`);
		}
	}

	stopPlayerWalkAnimation(sessionId) {
		const instance = this.playerRenderInstances.get(sessionId);
		if (instance?.walkAction && instance.walkAction.isRunning()) {
			instance.walkAction.stop();
			console.log(`‚èπÔ∏è ${sessionId} Í±∑Í∏∞ Ïï†ÎãàÎ©îÏù¥ÏÖò Ï†ïÏßÄ`);
		}
	}
	// ===== Ï∫êÎ¶≠ÌÑ∞ ÌååÏ∏† Î°úÎî© =====
	loadCharacterParts(character, parts, nickName) {
		console.log('Ï∫êÎ¶≠ÌÑ∞ ÌååÏ∏† Î°úÎî© ÏãúÏûë:', nickName, parts);
		console.log('üìä ÌååÏ∏† ÌÇ§Îì§:', Object.keys(parts));

		// Î™®Îì† ÌååÏ∏†Î•º ÏàúÌöåÌïòÎ©¥ÏÑú Î°úÎî©
		for (const [partType, partData] of Object.entries(parts)) {
			if (partType === 'accessory') {
				// accessoryÎäî main Î∞∞Ïó¥Í≥º detail Îã®ÏùºÎ°ú Íµ¨ÏÑ±
				partData.main?.forEach((item, i) => {
					if (item?.style) {
						this.loadPart(character, 'accessory', item, 'main');
					}
				});

				// detail Îã®Ïùº
				if (partData.detail?.style) {
					this.loadPart(character, 'accessory', partData.detail, 'detail');
				}
			} else if (partData?.style) {
				// ÏùºÎ∞ò ÌååÏ∏†
				this.loadPart(character, partType, partData);
			}
		}
	}

	// ===== Í∞úÎ≥Ñ ÌååÏ∏† Î°úÎî© =====
	loadPart(character, partType, partData, subType = null) {
		const modelPath = this.getModelPath(partType, partData.style);
		const name = subType ? `${partType}.${subType}` : partType;

		this.loader.load(modelPath, (gltf) => {
			const model = gltf.scene;

			// ÏÉâÏÉÅ Ï†ÅÏö© (ÏûàÎäî Í≤ΩÏö∞)
			if (partData.color) {
				model.traverse((child) => {
					if (child.isMesh && child.material && child.material.color) {
						if (child.material.map) child.material.map = null;
						child.material.color.set(partData.color);
						child.material.needsUpdate = true;
					}
				});
			}

			// ÌååÏ∏† ÏÑ§Ï†ï Ï†ÅÏö©
			this.applyPartSettings(model, partType, character, subType);

			// Ï∫êÎ¶≠ÌÑ∞Ïóê Ï∂îÍ∞Ä
			character.add(model);
			console.log(`${name} Î°úÎî© ÏôÑÎ£å`);

		}, undefined, (error) => {
			console.error(`${name} Î°úÎî© Ïã§Ìå®:`, error);
		});
	}

	// ===== ÌååÏ∏†Î≥Ñ ÏúÑÏπò/Ïä§ÏºÄÏùº ÏÑ§Ï†ï =====
	applyPartSettings(model, partType, character, subType) {
		const baseScale = character.scale.x * 75;

		switch (partType) {
			case 'hair':
				model.scale.set(baseScale * 1.6, baseScale * 1.6, baseScale * 1.6);
				model.position.set(0, -13, 0);
				break;

			case 'accessory':
				if (subType === 'main') {
					model.scale.set(baseScale * 1.5, baseScale * 1.5, baseScale * 1.5);
					model.position.set(0, -9, 0);
				} else if (subType === 'detail') {
					model.scale.set(baseScale * 0.3, baseScale * 0.3, baseScale * 0.3);
					model.position.set(0, -10, 0);
				} else {
					model.scale.set(baseScale, baseScale, baseScale);
					model.position.set(0, -4, 0);
				}
				break;

			case 'dress':
			case 'top':
				model.scale.set(baseScale * 1.6, baseScale * 1.6, baseScale * 1.6);
				model.position.set(0, 5, 0);
				break;

			case 'bottom':
			case 'shoes':
			default:
				model.scale.set(baseScale * 0.3, baseScale * 0.2, baseScale * 0.2);
				model.position.set(0, -4, 0);
				break;
		}

		console.log(`‚öôÔ∏è ${partType}${subType ? '.' + subType : ''} ÏÑ§Ï†ï Ï†ÅÏö©:`, {
			scale: model.scale,
			position: model.position
		});
	}

	// ===== ÌîåÎ†àÏù¥Ïñ¥ ÏúÑÏπò ÏóÖÎç∞Ïù¥Ìä∏ =====
	updatePlayerPosition(sessionId, position) {
		console.log('=== ÏúÑÏπò ÏóÖÎç∞Ïù¥Ìä∏ ÏãúÎèÑ ===');
		console.log('ÏÉà ÏúÑÏπò:', position);
		console.log('Ï∞æÎäî sessionId:', sessionId);

		const character = this.playerCharacters.get(sessionId);
		if (character) {
			character.position.set(position.x, position.y, position.z);
			console.log('ÏúÑÏπò ÏóÖÎç∞Ïù¥Ìä∏ ÏôÑÎ£å');
		} else {
			console.log('Ï∫êÎ¶≠ÌÑ∞Î•º Ï∞æÏùÑ Ïàò ÏóÜÏùå!');
			console.log('playerCharacters Î™©Î°ù:', this.playerCharacters);
		}
	}
	clearAllRenderInstances() {
		console.log('üßπ Î™®Îì† Î†åÎçî Ïù∏Ïä§ÌÑ¥Ïä§ Ï†ïÎ¶¨ (Îßµ Î≥ÄÍ≤Ω)');

		this.playerRenderInstances.forEach((instance, sessionId) => {
			if (instance.threeInstance) {
				instance.threeInstance.dispose();
			}
			if (instance.canvas && instance.canvas.parentNode) {
				instance.canvas.parentNode.removeChild(instance.canvas);
			}
		});

		// Ï∫êÎ¶≠ÌÑ∞ Îç∞Ïù¥ÌÑ∞Îßå Ï†ïÎ¶¨ (loaderÎäî Ïú†ÏßÄ)
		this.playerRenderInstances.clear();
		this.playerCharacters.clear();
		this.myCharacter = null;
		this.mixer = null;
		this.walkAction = null;

		console.log('‚úÖ Î†åÎçî Ïù∏Ïä§ÌÑ¥Ïä§ Ï†ïÎ¶¨ ÏôÑÎ£å (Îßµ Î≥ÄÍ≤Ω)');
	}
	// ===== ÌîåÎ†àÏù¥Ïñ¥ Ï†úÍ±∞ =====
	removePlayer(sessionId) {
		const character = this.playerCharacters.get(sessionId);
		if (character) {
			this.playerCharacters.delete(sessionId);

			if (this.myCharacter === character) {
				this.myCharacter = null;
			}
		}

		// üÜï Î†åÎçî Ïù∏Ïä§ÌÑ¥Ïä§ Ï†úÍ±∞
		const instance = this.playerRenderInstances.get(sessionId);
		if (instance) {
			if (instance.canvas && instance.canvas.parentNode) {
				instance.canvas.parentNode.removeChild(instance.canvas);
			}
			if (instance.threeInstance) {
				instance.threeInstance.dispose();
			}
			this.playerRenderInstances.delete(sessionId);
		}
	}

	// ===== ÎÇ¥ Ï∫êÎ¶≠ÌÑ∞ Î∞òÌôò =====
	getMyCharacter() {
		return this.myCharacter;
	}

	// ===== ÌäπÏ†ï Ï∫êÎ¶≠ÌÑ∞ Î∞òÌôò =====
	getCharacter(sessionId) {
		return this.playerCharacters.get(sessionId);
	}

	// ===== Î™®Îì† Ï∫êÎ¶≠ÌÑ∞ Î∞òÌôò =====
	getAllCharacters() {
		return this.playerCharacters;
	}

	// ===== Î¶¨ÏÜåÏä§ Ï†ïÎ¶¨ =====
	dispose() {
		console.log('üßπ Ï∫êÎ¶≠ÌÑ∞ Î†åÎçîÎßÅ Î™®Îìà Ï†ïÎ¶¨');

		// üÜï Î™®Îì† Î†åÎçî Ïù∏Ïä§ÌÑ¥Ïä§ Ï†ïÎ¶¨
		this.playerRenderInstances.forEach((instance, sessionId) => {
			if (instance.threeInstance) {
				instance.threeInstance.dispose();
			}
			if (instance.canvas && instance.canvas.parentNode) {
				instance.canvas.parentNode.removeChild(instance.canvas);
			}
		});

		// Îßµ Ï†ïÎ¶¨
		this.playerCharacters.clear();
		this.playerRenderInstances.clear(); // üÜï Ï∂îÍ∞Ä
		this.myCharacter = null;
		this.mixer = null;        // üÜï Ï∂îÍ∞Ä
		this.walkAction = null;   // üÜï Ï∂îÍ∞Ä
		this.loader = null;

		console.log('‚úÖ Ï∫êÎ¶≠ÌÑ∞ Î†åÎçîÎßÅ Î™®Îìà Ï†ïÎ¶¨ ÏôÑÎ£å');
	}
}
